use std::fmt::{Display, Formatter};

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum TokenType {
    // Basic Tokens
    ParenOpen,
    ParenClose,
    BraceOpen,
    BraceClose,
    BracketOpen,
    BracketClose,
    Comma,
    Dot,
    Colon,
    Range,
    RangeEqual,

    // Operators
    Not,
    NotEqual,
    Declaration,
    Equal,
    Greater,
    Less,
    GreaterEqual,
    LessEqual,
    Minus,
    Plus,
    Slash,
    Star,
    Percent,
    Pipe,
    Arrow,
    FatArrow,

    // Literals
    Identifier,
    Constant,
    Wildcard,
    CharLiteral,
    Str,
    Integer,
    Float,

    // Keywords
    And,
    Or,
    Super,
    Implementing,
    ClassSelf,
    True,
    False,
    Use,
    Match,
    In,
    When,
    Pass,

    // Generated by Scanner
    Indent,
    Dedent,

    // Meta
    Decorator,
    Space,
    Comment,
    Documentation,
    Endline,
    Eof,

    //Errors
    UnexpectedCharacter,
    UnterminatedChar,
    EmptyChar,
    UnterminatedString,
    InvalidIndentation,
}

impl Display for TokenType {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        // write!(f, "{:?}", self)
        use TokenType::*;

        match self {
            ParenOpen => "(",
            ParenClose => ")",
            BraceOpen => "{",
            BraceClose => "}",
            BracketOpen => "[",
            BracketClose => "]",
            Comma => ",",
            Dot => ".",
            Colon => ":",
            Range => "..",
            RangeEqual => "..=",
            Not => "!",
            NotEqual => "!=",
            Declaration => "=",
            Equal => "==",
            Greater => ">",
            Less => "<",
            GreaterEqual => ">=",
            LessEqual => "<=",
            Minus => "-",
            Plus => "+",
            Slash => "/",
            Star => "*",
            Percent => "%",
            Pipe => "|",
            Arrow => "->",
            FatArrow => "=>",
            Identifier => "(Identifier)",
            Constant => "(Constant)",
            Wildcard => "_",
            CharLiteral => "(CharLiteral)",
            Str => "(Str)",
            Integer => "(Integer)",
            Float => "(Float)",
            And => "and",
            Or => "or",
            Super => "super",
            Implementing => "implementing",
            ClassSelf => "self",
            True => "true",
            False => "false",
            Use => "use",
            Match => "match",
            In => "in",
            When => "when",
            Pass => "pass",
            Indent => "(Indent)",
            Dedent => "(Dedent)",
            Decorator => "@",
            Space => "(Space)",
            Comment => "(Comment)",
            Documentation => "(Documentation)",
            Endline => "(Endline)",
            Eof => "(Eof)",
            UnexpectedCharacter => "(UnexpectedCharacter)",
            UnterminatedChar => "(UnterminatedChar)",
            EmptyChar => "(EmptyChar)",
            UnterminatedString => "(UnterminatedString)",
            InvalidIndentation => "(InvalidIndentation)",
        }
    }
}
